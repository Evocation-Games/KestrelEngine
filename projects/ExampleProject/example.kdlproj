` Copyright (c) 2020-2021 Tom Hancocks
` `
` Permission is hereby granted, free of charge, to any person obtaining a copy
` of this software and associated documentation files (the "Software"), to deal
` in the Software without restriction, including without limitation the rights
` to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
` copies of the Software, and to permit persons to whom the Software is
` furnished to do so, subject to the following conditions:
` `
` The above copyright notice and this permission notice shall be included in all
` copies or substantial portions of the Software.
` `
` THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
` IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
` FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
` AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
` LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
` OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
` SOFTWARE.

@project "Example Project";
@author "Tom Hancocks";
@version "1.0";

@import "../support/kdl/GLSLShader.kdl";
@import "../support/kdl/LuaScript.kdl";

` Kestrel will always load LuaScript #0 from the global namespace initially when it first launches.
declare LuaScript {
    new(#0, "main") {
        Script = import "../projects/ExampleProject/main.lua";
    };
};

` We can setup a component/scene by creating the component like so. By doing this we are placing the scene within
` its own namespace as well.
` Components serve as a convenient way of managing resources of the same type.
component "Example" {
    path_prefix = "../projects/ExampleProject/Scenes/Example/";
    namespace = "example";
    base_id = #128;
    as_type = LuaScript;

    files {
        "ExampleScene.lua" ("Scene::Example");
    };
};

` We want to generate some additional resources for the example scene. These are just simple strings that will be
` randomly displayed in the app. First we're going to define a new text resource, and then use that type along with a
` components to import a series of text files.
@type TextResource : "text" {
    template {
        CSTR Text;
    };
    field("Text") {
        Text as File;
    };
};

component "ExampleResources" {
    path_prefix = "../projects/ExampleProject/Resources/";
    namespace = "example";
    base_id = #128;
    as_type = TextResource;

    files {
        "Kestrel.txt" ("Resource::Message::Kestrel");
        "KDL.txt" ("Resource::Message::KDL");
    };
};

` Shaders
declare GLSLShader {
    new (#0, "Sprite::Shader::Vertex") {
        Script = import "../projects/ExampleProject/Shaders/OpenGL/Vertex.glsl";
    };
    new (#1, "Sprite::Shader::Fragment") {
        Script = import "../projects/ExampleProject/Shaders/OpenGL/Fragment.glsl";
    };  
};
