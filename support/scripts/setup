#!/usr/bin/env bash
# Copyright (c) 2021 Tom Hancocks
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

OS="$(uname -s | tr '[:upper:]' '[:lower:]')"

if [[ $OS =~ ^linux ]]; then
  if APT_PATH="$(type -p "apt-get")" && [[ ! -z $APT_PATH ]]; then
    OS="linux"
  else
    echo "Unsupported Linux Distribution. We currently only support Debian based systems. Aborting."
    exit 1
  fi
elif [[ $OS =~ ^darwin ]]; then
  true
elif [[ $OS =~ ^mingw ]]; then
  true
else
  echo "Unsupported OS. Aborting."
  exit 1
fi

if ! CLANG_PATH="$(type -p "clang")" || [[ -z $CLANG_PATH ]]; then
  if [[ $OS =~ ^darwin ]]; then
    echo "Installing Xcode Commandline Tools..."
    xcode-select --install
  elif [[ $OS =~ ^linux ]]; then
    echo "Installing LLVM/Clang..."
    sudo apt-get install -y -q --no-install-recommends clang++-10
  elif [[ $OS =~ ^mingw ]]; then
    echo "Installing LLVM/Clang..."
    pacman -S --noconfirm mingw-w64-x86_64-clang
  fi
fi

install_package() {
  if [[ $OS =~ ^darwin ]]; then
    if brew list "$1" &> /dev/null; then
      true
    else
      printf "Installing %s... " "$1"
      if brew install "$1" &> /dev/null; then
        printf "ok\n"
      else
        printf "failed\n"
        exit 1
      fi
    fi

  elif [[ $OS =~ ^linux ]]; then
    if [ "$(dpkg-query -W -f='${Status}' "$1" 2>/dev/null | grep -c "ok installed")" -eq 0 ]; then
      printf "Installing %s... " "$1"
      if sudo apt-get install -y -q --no-install-recommends "$1" &> /dev/null; then
        printf "ok\n"
      else
        printf "failed\n"
        exit 1
      fi
    fi

  elif [[ $OS =~ ^mingw ]]; then
    printf "Installing %s...\n" "$1"
    pacman -S --noconfirm "$1" &> /dev/null
  fi
}

if [[ $OS =~ ^darwin ]]; then
  if ! BREW_PATH="$(type -p "brew")" || [[ -z $BREW_PATH ]]; then
    echo "Installing brew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  if [[ ! -f "support/vendor/libfreetype.a" ]]; then
    echo "Building universal libfreetype... "
    support/scripts/compile-library-macos.sh freetype libfreetype FreeType
  fi

  if [[ ! -f "support/vendor/libglfw.a" ]]; then
    echo "Building universal libglfw... "
    support/scripts/compile-library-macos.sh glfw src/libglfw3 GLFW
  fi

  if [[ ! -f "support/vendor/libpng.a" ]]; then
    echo "Building universal libpng... "
    _=$(cd submodules/png && git apply ../../support/patches/libpng.macos.patch)
    support/scripts/compile-library-macos.sh png libpng16 PNG
  fi

  if [[ ! -f "support/vendor/libluajit.a" ]]; then
    echo "Building universal libluajit... "
    support/scripts/compile-luajit-macos.sh
  fi
fi

if ! CMAKE_PATH="$(type -p "cmake")" || [[ -z $CMAKE_PATH ]]; then
  install_package "cmake"
fi

if [[ $OS =~ ^linux ]]; then
  if ! WGET_PATH="$(type -p "wget")" || [[ -z $WGET_PATH ]]; then
    install_package "wget"
  fi

  install_package "libxrandr-dev"
  install_package "libxinerama-dev"
  install_package "libxcursor-dev"
  install_package "libxi-dev"
  install_package "libopenal-dev"
  install_package "libopengl-dev"
  install_package "libglfw3-dev"
  install_package "libglew-dev"
  install_package "libfreetype-dev"
  install_package "libfontconfig-dev"

  if [[ ! -f "support/packaging/appimage/appimagetool" ]]; then
    echo "Downloading and installing appimagetool..."
    wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O support/packaging/appimage/appimagetool
    chmod +x support/packaging/appimage/appimagetool
  fi
elif [[ $OS =~ ^mingw ]]; then
  if ! NINJA_PATH="$(type -p "ninja")" || [[ -z $NINJA_PATH ]]; then
    install_package "ninja"
  fi

  install_package "mingw-w64-x86_64-openal"
  install_package "mingw-w64-x86_64-mesa"
  install_package "mingw-w64-x86_64-glew"
  install_package "mingw-w64-x86_64-freetype"
  install_package "mingw-w64-x86_64-glfw"
fi

echo "Everything looks good! You're ready to build Kestrel."